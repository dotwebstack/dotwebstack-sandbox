
graph stage:TestTheatre {
  # --------------------------------------------------------------------------------------------------------------------------------------  VocabularyQuery -------------------------------------------------
  stage:IP_VocabularyQuery a elmo:InformationProduct;
    
    elmo:query '''
      prefix dcterms: <http://purl.org/dc/terms/>
      prefix shacl: <http://www.w3.org/ns/shacl#>
      CONSTRUCT {
        ?element rdf:type ?type.
        ?element rdfs:label ?label.
        ?element rdfs:comment ?def.
        ?element rdfs:subClassOf ?super.
        ?shape shacl:targetClass ?element.
        ?shape shacl:property ?pc.
        ?pc shacl:path ?pred.
        ?pc shacl:class ?class.
        ?pc shacl:datatype ?datatype.
        ?pc shacl:in ?collection.
        ?pc shacl:pattern ?pattern.
      }
      WHERE {
        GRAPH <http://localhost:8080/stage> {
          ?element rdf:type ?type.
          OPTIONAL {?element rdfs:label ?label}
          OPTIONAL {?element rdfs:comment ?def}
          OPTIONAL {
            ?element dcterms:subject ?begrip.
            ?begrip skos:definition ?def.
          }
          OPTIONAL {?element rdfs:subClassOf ?super}
          OPTIONAL {
            ?shape shacl:targetClass ?element.
            ?shape shacl:property ?pc.
            ?pc (shacl:path|shacl:predicate) ?pred.
            OPTIONAL {?pc shacl:class ?class}
            OPTIONAL {?pc shacl:datatype ?datatype}
            OPTIONAL {?pc shacl:in ?collection}
            OPTIONAL {?pc shacl:pattern ?pattern}
          }
          FILTER (?type = owl:Class || ?type = owl:DatatypeProperty || ?type = owl:ObjectProperty || ?type = owl:Ontology)
        }
      }
    '''
  .

  # --------------------------------------------------------------------------------------------------------------------------------------  UploadedVocabulary -------------------------------------------------

  stage:IP_UploadedVocabulary a elmo:InformationProduct;
    
    elmo:query '''
      construct {?s?p?o}
      where {
        graph <http://localhost:8080/container/upload> {
          ?s?p?o
        }
      }
    ''';
  .

  # --------------------------------------------------------------------------------------------------------------------------------------  UploadedModelAppearance -------------------------------------------------

  stage:IP_UploadedModelAppearance a elmo:InformationProduct;
    
    elmo:query '''
      construct {?s?p?o}
      where {
        graph <http://localhost:8080/container/upload> {
          ?s?p?o
        }
      }
    ''';
  .

  # --------------------------------------------------------------------------------------------------------------------------------------  UploadedShapesQuery -------------------------------------------------

  stage:IP_UploadedShapesQuery a elmo:InformationProduct;
    
    elmo:query '''
      prefix shacl: <http://www.w3.org/ns/shacl#>
      construct {
        ?shape ?sp ?so.
        ?class rdf:type rdfs:Class.
        ?class rdfs:comment "".
        ?subclass rdfs:subClassOf ?superclass.
        ?superclass rdf:type rdfs:Class.
        ?pc ?pcp ?pco.
        ?property rdf:type rdf:Property.
        ?property rdfs:comment "".
        ?subproperty rdfs:subPropertyOf ?superproperty.
        ?superproperty rdf:type rdf:Property.
      }
      where {
        graph <http://localhost:8080/container/upload> {
          ?shape a shacl:Shape.
          ?shape ?sp ?so.
          OPTIONAL {
            ?shape shacl:scopeClass ?class.
            OPTIONAL {
              ?class rdfs:subClassOf* ?subclass.
              ?subclass rdfs:subClassOf ?superclass
            }
          }
          OPTIONAL {
            ?shape shacl:property ?pc.
            ?pc ?pcp ?pco.
            OPTIONAL {
              ?pc shacl:predicate ?property.
              OPTIONAL {
                ?property rdfs:subPropertyOf* ?subproperty.
                ?subproperty rdfs:subPropertyOf ?superproperty
              }
            }
          }
        }
      }
    ''';
  .

  # --------------------------------------------------------------------------------------------------------------------------------------  UploadedShapesAppearanceYed -------------------------------------------------

  stage:IP_UploadedShapesAppearanceYed a elmo:InformationProduct;
    
    elmo:query '''
      prefix shacl: <http://www.w3.org/ns/shacl#>
      CONSTRUCT {
        ?element rdfs:comment ?attribs.
        ?element rdfs:subClassOf ?super.
        ?element ?pc ?class.
        ?element rdf:type owl:Class.
        ?pc rdfs:label ?plabel.
      }
      WHERE {
        GRAPH <http://localhost:8080/container/upload> {
          ?shape shacl:scopeClass ?element.
          OPTIONAL {?element rdfs:subClassOf ?super}
          OPTIONAL {
            select ?shape ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
            where {
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              ?pc shacl:class ?class.
              OPTIONAL {?pred rdfs:label ?plabel}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {?pc shacl:in ?col}
            }
          }
          OPTIONAL {
            select ?shape (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
            where {
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              OPTIONAL {?pc shacl:datatype ?datatype}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {
                ?pc shacl:class ?class.
                ?class rdf:type owl:Class.
              }
            }
            group by ?shape
          }
        }
      }
    ''';
  .


  # --------------------------------------------------------------------------------------------------------------------------------------  UploadedVocabularyAppearanceYed -------------------------------------------------

  stage:IP_UploadedVocabularyAppearanceYed a elmo:InformationProduct;
    
    elmo:query '''
      prefix shacl: <http://www.w3.org/ns/shacl#>
      CONSTRUCT {
        ?element rdfs:label ?label.
        ?element rdfs:comment ?attribs.
        ?element rdfs:subClassOf ?super.
        ?element ?pc ?class.
        ?element rdf:type owl:Class.
        ?pc rdfs:label ?plabel.
      }
      WHERE {
        GRAPH <http://localhost:8080/container/upload> {
          ?element rdf:type owl:Class.
          ?element rdfs:label ?label
          OPTIONAL {?element rdfs:subClassOf ?super}
          OPTIONAL {
            select ?element ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
            where {
              ?shape shacl:scopeClass ?element.
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              ?pc shacl:class ?class.
              ?class rdf:type owl:Class.
              OPTIONAL {?pred rdfs:label ?plabel}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {?pc shacl:in ?col}
            }
          }
          OPTIONAL {
            select ?element (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
            where {
              ?shape shacl:scopeClass ?element.
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              OPTIONAL {?pred rdfs:label ?plabel}
              OPTIONAL {?pc shacl:datatype ?datatype}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {
                ?pc shacl:class ?class.
                ?class rdf:type owl:Class.
              }
            }
            group by ?element
          }
        }
      }
    ''';
  .

  # --------------------------------------------------------------------------------------------------------------------------------------  VocabularyAppearanceYed -------------------------------------------------

  stage:IP_VocabularyAppearanceYed a elmo:InformationProduct;
    
    elmo:query '''
      prefix shacl: <http://www.w3.org/ns/shacl#>
      CONSTRUCT {
        ?element rdfs:label ?label.
        ?element rdfs:comment ?attribs.
        ?element rdfs:subClassOf ?super.
        ?element ?pc ?class.
        ?element rdf:type owl:Class.
        ?pc rdfs:label ?plabel.
      }
      WHERE {
        GRAPH <http://localhost:8080/stage> {
          ?element rdf:type owl:Class.
          ?element rdfs:label ?label
          OPTIONAL {?element rdfs:subClassOf ?super}
          OPTIONAL {
            select ?element ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
            where {
              ?shape shacl:scopeClass ?element.
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              ?pc shacl:class ?class.
              ?class rdf:type owl:Class.
              OPTIONAL {?pred rdfs:label ?plabel}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {?pc shacl:in ?col}
            }
          }
          OPTIONAL {
            select ?element (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
            where {
              ?shape shacl:scopeClass ?element.
              ?shape shacl:property ?pc.
              ?pc shacl:predicate ?pred.
              OPTIONAL {?pred rdfs:label ?plabel}
              OPTIONAL {?pc shacl:datatype ?datatype}
              OPTIONAL {?pc shacl:minCount ?minc}
              OPTIONAL {?pc shacl:maxCount ?maxc}
              FILTER NOT EXISTS {
                ?pc shacl:class ?class.
                ?class rdf:type owl:Class.
              }
            }
            group by ?element
          }
        }
      }
    ''';
  .
}